{
  "name" : "warsa-persons",
  "endpointURL" : "http://ldf.fi/warsa/sparql",
  "lasLocale" : "fi",
  "queryUsingOriginalForm" : false,
  "queryUsingBaseform" : true,
  "queryUsingInflections" : [ ],
  "queryModifyingEveryPart" : true,
  "queryModifyingOnlyLastPart" : false,
  "positiveLASFilters" : {
    "" : [ null ]
  },
  "negativeLASFilters" : {
    "UPOS" : [ "PRON", "VERB", "ADJ", "ADV", "CONJ" ]
  },
  "strongNegativeLASFilters" : {
    "" : [ null ]
  },
  "guess" : true,
  "query" : "PREFIX text: <http://jena.apache.org/text#>\nPREFIX apf: <http://jena.hpl.hp.com/ARQ/property#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX actors: <http://ldf.fi/warsa/actors/>\nPREFIX etype: <http://ldf.fi/warsa/events/event_types/>\nPREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX cas: <http://ldf.fi/schema/narc-menehtyneet1939-45/>\n\nSELECT DISTINCT ?id ?ngram (COALESCE(?nlabel, ?plabel) AS ?label) ?rank_label ?etunimet ?sukunimi\nWHERE\n{\n    VALUES ?ngram {\n        <VALUES>\n    }\n  \tFILTER(STRLEN(?ngram)>3 && REGEX(?ngram,\"^[A-ZÅÄÖ]\"))\n    # Henkilö löytyy ainoastaan, jos haussa käytetään etunimiä/sotilasarvoa JA sukunimeä.\n    # Yhden pituiset ngrammit eivät osu mihinkään.\n\n    # Oletus: sukunimi aina viimeisenä ('_' voidaan lisätä sukunimeen kaksiosaisen nimen tunnistamiseksi)\n    # BIND(\"^([.a-zA-ZäÄöÖåÅ-]+?[\\\\. ])[ ]*([.a-zA-ZäÄöÖåÅ-]+?[. ])*[ ]*([.a-zA-ZäÄöÖåÅ-]+?[. ])*[ ]*([_.a-zA-ZäÄöÖåÅè-]+)$\" AS ?nimiregex)\n    BIND(\"^((?:[a-zA-ZäÄåÅöÖ-]\\\\.[ ]*)|(?:[a-zA-ZäÄöÖåÅèü-]{3,}[ ]+))((?:[a-zA-ZäÄåÅöÖ-]\\\\.[ ]*)|(?:[a-zA-ZäÄöÖåÅèü-]{3,}[ ]+))?((?:[a-zA-ZäÄåÅöÖ-]\\\\.[ ]*)|(?:[a-zA-ZäÄöÖåÅèü-]{3,}[ ]+))*([_a-zA-ZäÄöÖåÅèü-]{3,})$\" AS ?nimiregex)\n    BIND(UCASE(REPLACE(REPLACE(?ngram, ?nimiregex, \"$4\"), \"_\", \" \")) AS ?sukunimi)\n    # Etunimi/sotilasarvo tai toinen nimi/etunimi (ja trimmataan mahdolliset välilyönnit)\n    BIND(REPLACE(REPLACE(?ngram, ?nimiregex, \"$1\"), \"^(.*?)[ ]*$\", \"$1\") AS ?ngrametu)\n    BIND(REPLACE(REPLACE(?ngram, ?nimiregex, \"$2\"), \"^([.a-zA-ZäÄöÖåÅ-]*?)[ ]*$\", \"$1\") AS ?ngramkeski)\n    # Pitää olla etunimi/sotilasarvo tai etunimen etukirjain. Nimi on vähintään kolmen kirjaimen pituinen.\n    FILTER(REGEX(?ngrametu, \"(^[A-ZÄÖÅ]\\\\.$)|(^[a-zA-ZäÄöÖåÅèü-]{3,}$)\"))\n    # Joko ei toista nimeä tai samat ehdot kuin etunimellä.\n    FILTER(REGEX(?ngramkeski, \"(^$)|(^[A-ZÄÖÅ]\\\\.$)|(^[a-zA-ZäÄöÖåÅ-]{3,}$)\"))\n    BIND(UCASE(?ngrametu) AS ?etu)\n    # Ei hyväksytä muotoa E. Toinen Suku.\n    FILTER(?ngramkeski=\"\" || !(STRENDS(?ngrametu, \".\") && !STRENDS(?ngramkeski, \".\")))\n    BIND(UCASE(?ngramkeski) AS ?keski)\n    BIND(CONCAT('\"',?sukunimi,'\"') AS ?qstring)\n\n    GRAPH <http://ldf.fi/warsa/actors> { ?id text:query ?qstring . }\n    ?id foaf:familyName ?familyName .\n    FILTER(?sukunimi = UCASE(?familyName))\n    ?id skos:prefLabel ?plabel .\n    OPTIONAL { ?id foaf:firstName ?etunimet . }\n    BIND(CONCAT(?etunimet, ' ', ?familyName) AS ?nlabel)\n    OPTIONAL {\n        ?promotion_id a etype:Promotion ;\n            crm:P11_had_participant ?id ;\n            actors:hasRank ?promotion_rank_id ;\n            crm:P4_has_time-span ?timespan_id .\n        ?promotion_rank_id skos:prefLabel ?promotion_rank .\n        ?timespan_id crm:P82a_begin_of_the_begin ?earliest_promotion_time .\n    }\n\n    # Haettavan etunimen on löydyttävä etunimistä, haettavan etukirjaimen on oltava\n    # jonkin etunimen ensimmäinen kirjain tai \"etunimen\" on oltava sotilasarvo.\n    BIND(CONCAT(\"(^|[ ])\", substr(?etu, 1, 1)) as ?etukirjainre)\n    BIND(CONCAT(\"(^|[ ])\", substr(?keski, 1, 1)) as ?keskikirjainre)\n    BIND(CONCAT(\"(^|[ ])\", ?etu, \"($|[ ])\") AS ?etunimire)\n    BIND(CONCAT(\"(^|[ ])\", ?keski, \"($|[ ])\") AS ?toinennimire)\n    BIND(IF(STRLEN(?keski)=2, ?keskikirjainre, IF(?keski=\"\", \".\", ?toinennimire)) AS ?keskire)\n    BIND(IF(STRLEN(?etu)=2, ?etukirjainre, ?etunimire) AS ?eture)\n    BIND(CONCAT(\"(^|[ ])\", ?etu, \" \", ?keski, \"($|[ ])\") AS ?longrankre)\n  \tBIND(REGEX(?etu, \"MINISTERI$\") AS ?minister_test)\n  \tFILTER(IF(?minister_test,\n      NOT EXISTS { ?id a <http://ldf.fi/warsa/actors/actor_types/MilitaryPerson> . },TRUE)\n  \t)\n  \tBIND((REGEX(?promotion_rank, ?eture, \"i\") || REGEX(?rank_label, ?eture, \"i\")) AS ?rank_test)\n  \tBIND((REGEX(?promotion_rank, ?longrankre, \"i\") || REGEX(?rank_label, ?longrankre, \"i\")) AS ?long_rank_test)\n    FILTER(\n        IF(STRENDS(?etu, \".\"),\n            # Etunimen etukirjain (tämä otettava erikseen, sillä etukirjainta ei ole tarkoituksenmukaista verrata sotilasarvoon)\n            REGEX(?etunimet, ?etukirjainre) && REGEX(?etunimet, ?keskire),\n        # else\n            # Koko etunimi tai sotilasarvo tai \"ministeri\"\n      \t\t(REGEX(?etunimet, ?keskire, \"i\") && (REGEX(?etunimet, ?eture, \"i\"))) ||\n                IF(?keski != \"\",\n                \t?rank_test && REGEX(?etunimet, ?keskire, \"i\")\n                  \t|| ?long_rank_test || (?minister_test && REGEX(?etunimet, ?keskire, \"i\")),\n                # else\n        \t\t\t?minister_test || ?rank_test || ?long_rank_test\n                )\n        )\n    )\n}",
  "depth" : 0,
  "maxNGrams" : 5
}